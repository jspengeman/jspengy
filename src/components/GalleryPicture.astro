---
import { Picture } from 'astro:assets';
import { getImageUrl } from "../utils/gallery"
const { currPicture, prevPicture, nextPicture } = Astro.props;
---

<div class="my-8 mb-16">
    <div class="flex justify-center mb-2">
        {prevPicture && <a id="prev-button" data-prev-picture={prevPicture} href={`/gallery/${prevPicture}`} class="mx-3 px-1 border-1 border-solid rounded-md"> ← </a>}
        {(nextPicture && prevPicture) && <span>|</span>}
        {nextPicture && <a id="next-button" data-next-picture={nextPicture} href={`/gallery/${nextPicture}`} class="mx-3 px-1 border-1 border-solid rounded-md"> → </a>}
    </div>
    <Picture
        src={getImageUrl("/" + currPicture)}
        alt="Sorry, I will work on getting alt text implemented. One step at a time."
        format="avif"
        inferSize={true}
        quality={75}
        class="rounded-sm pb-4 border border-transparent"
        decoding="async"
        loading="eager"
    />
</div>

<script>
    const prevButtton = document.getElementById("prev-button");
    const nextButton = document.getElementById("next-button");

    const handlePrevAction = () => {
        const prevPicture = prevButtton?.dataset.prevPicture;
        if (prevPicture) {
            window.location.replace(`/gallery/${prevPicture}`);
        }
    }

    const handleNextAction = () => {
        const nextPicture = nextButton?.dataset.nextPicture;
        if (nextPicture) {
            window.location.replace(`/gallery/${nextPicture}`);
        }
    }

    document.addEventListener("keydown", (event) => {
        if (event.key === "ArrowLeft") {
            handlePrevAction();
        } else if (event.key === "ArrowRight") {
            handleNextAction();
        }
    });

    let touchstartX = 0, touchstartY = 0, touchendX = 0, touchendY = 0;
    document.addEventListener('touchstart', (event) => {
        touchstartX = event.changedTouches[0].screenX;
        touchstartY = event.changedTouches[0].screenY;
    }, false);

    document.addEventListener('touchend', (event) => {
        touchendX = event.changedTouches[0].screenX;
        touchendY = event.changedTouches[0].screenY;
        handleGesture();
    }, false);

    const handleGesture = () => {
        if (touchendX < touchstartX) {
            handlePrevAction();
        }

        if (touchendX > touchstartX) {
            handleNextAction();
        }
    }
</script>